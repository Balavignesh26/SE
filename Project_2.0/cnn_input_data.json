{
  "print_statement": {
    "raw_ast": "Module(body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='Hello, World!')], keywords=[]))], type_ignores=[])",
    "flattened_ast": [
      "Module",
      "Expr",
      "Call",
      "Name",
      "Load",
      "Constant"
    ],
    "tokenized_ast": [
      1,
      4,
      5,
      6,
      8,
      7
    ]
  },
  "variable_assignment": {
    "raw_ast": "Module(body=[Assign(targets=[Name(id='x', ctx=Store())], value=Constant(value=10)), Assign(targets=[Name(id='y', ctx=Store())], value=BinOp(left=Name(id='x', ctx=Load()), op=Add(), right=Constant(value=5)))], type_ignores=[])",
    "flattened_ast": [
      "Module",
      "Assign",
      "Name",
      "Store",
      "Constant",
      "Assign",
      "Name",
      "Store",
      "BinOp",
      "Name",
      "Load",
      "Add",
      "Constant"
    ],
    "tokenized_ast": [
      1,
      9,
      6,
      0,
      7,
      9,
      6,
      0,
      10,
      6,
      8,
      0,
      7
    ]
  },
  "function_with_return": {
    "raw_ast": "Module(body=[FunctionDef(name='add', args=arguments(posonlyargs=[], args=[arg(arg='a'), arg(arg='b')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Name(id='a', ctx=Load()), op=Add(), right=Name(id='b', ctx=Load())))], decorator_list=[], type_params=[])], type_ignores=[])",
    "flattened_ast": [
      "Module",
      "FunctionDef",
      "arguments",
      "arg",
      "arg",
      "Return",
      "BinOp",
      "Name",
      "Load",
      "Add",
      "Name",
      "Load"
    ],
    "tokenized_ast": [
      1,
      2,
      3,
      0,
      0,
      11,
      10,
      6,
      8,
      0,
      6,
      8
    ]
  },
  "function_with_default_args": {
    "raw_ast": "Module(body=[FunctionDef(name='greet', args=arguments(posonlyargs=[], args=[arg(arg='name')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='User')]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[BinOp(left=Constant(value='Hello, '), op=Add(), right=Name(id='name', ctx=Load()))], keywords=[]))], decorator_list=[], type_params=[])], type_ignores=[])",
    "flattened_ast": [
      "Module",
      "FunctionDef",
      "arguments",
      "arg",
      "Constant",
      "Expr",
      "Call",
      "Name",
      "Load",
      "BinOp",
      "Constant",
      "Add",
      "Name",
      "Load"
    ],
    "tokenized_ast": [
      1,
      2,
      3,
      0,
      7,
      4,
      5,
      6,
      8,
      10,
      7,
      0,
      6,
      8
    ]
  },
  "lambda_function": {
    "raw_ast": "Module(body=[Assign(targets=[Name(id='add', ctx=Store())], value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x'), arg(arg='y')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=BinOp(left=Name(id='x', ctx=Load()), op=Add(), right=Name(id='y', ctx=Load()))))], type_ignores=[])",
    "flattened_ast": [
      "Module",
      "Assign",
      "Name",
      "Store",
      "Lambda",
      "arguments",
      "arg",
      "arg",
      "BinOp",
      "Name",
      "Load",
      "Add",
      "Name",
      "Load"
    ],
    "tokenized_ast": [
      1,
      9,
      6,
      0,
      24,
      3,
      0,
      0,
      10,
      6,
      8,
      0,
      6,
      8
    ]
  },
  "if_else_statement": {
    "raw_ast": "Module(body=[Assign(targets=[Name(id='x', ctx=Store())], value=Constant(value=10)), If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=5)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='Greater')], keywords=[]))], orelse=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='Smaller')], keywords=[]))])], type_ignores=[])",
    "flattened_ast": [
      "Module",
      "Assign",
      "Name",
      "Store",
      "Constant",
      "If",
      "Compare",
      "Name",
      "Load",
      "Gt",
      "Constant",
      "Expr",
      "Call",
      "Name",
      "Load",
      "Constant",
      "Expr",
      "Call",
      "Name",
      "Load",
      "Constant"
    ],
    "tokenized_ast": [
      1,
      9,
      6,
      0,
      7,
      12,
      0,
      6,
      8,
      0,
      7,
      4,
      5,
      6,
      8,
      7,
      4,
      5,
      6,
      8,
      7
    ]
  },
  "if_elif_else": {
    "raw_ast": "Module(body=[Assign(targets=[Name(id='score', ctx=Store())], value=Constant(value=85)), If(test=Compare(left=Name(id='score', ctx=Load()), ops=[GtE()], comparators=[Constant(value=90)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='A')], keywords=[]))], orelse=[If(test=Compare(left=Name(id='score', ctx=Load()), ops=[GtE()], comparators=[Constant(value=75)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='B')], keywords=[]))], orelse=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='C')], keywords=[]))])])], type_ignores=[])",
    "flattened_ast": [
      "Module",
      "Assign",
      "Name",
      "Store",
      "Constant",
      "If",
      "Compare",
      "Name",
      "Load",
      "GtE",
      "Constant",
      "Expr",
      "Call",
      "Name",
      "Load",
      "Constant",
      "If",
      "Compare",
      "Name",
      "Load",
      "GtE",
      "Constant",
      "Expr",
      "Call",
      "Name",
      "Load",
      "Constant",
      "Expr",
      "Call",
      "Name",
      "Load",
      "Constant"
    ],
    "tokenized_ast": [
      1,
      9,
      6,
      0,
      7,
      12,
      0,
      6,
      8,
      0,
      7,
      4,
      5,
      6,
      8,
      7,
      12,
      0,
      6,
      8,
      0,
      7,
      4,
      5,
      6,
      8,
      7,
      4,
      5,
      6,
      8,
      7
    ]
  },
  "for_loop": {
    "raw_ast": "Module(body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=5)], keywords=[]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[])], type_ignores=[])",
    "flattened_ast": [
      "Module",
      "For",
      "Name",
      "Store",
      "Call",
      "Name",
      "Load",
      "Constant",
      "Expr",
      "Call",
      "Name",
      "Load",
      "Name",
      "Load"
    ],
    "tokenized_ast": [
      1,
      13,
      6,
      0,
      5,
      6,
      8,
      7,
      4,
      5,
      6,
      8,
      6,
      8
    ]
  },
  "while_loop": {
    "raw_ast": "Module(body=[Assign(targets=[Name(id='x', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x', ctx=Load()), ops=[Lt()], comparators=[Constant(value=5)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[])), AugAssign(target=Name(id='x', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])], type_ignores=[])",
    "flattened_ast": [
      "Module",
      "Assign",
      "Name",
      "Store",
      "Constant",
      "While",
      "Compare",
      "Name",
      "Load",
      "Lt",
      "Constant",
      "Expr",
      "Call",
      "Name",
      "Load",
      "Name",
      "Load",
      "AugAssign",
      "Name",
      "Store",
      "Add",
      "Constant"
    ],
    "tokenized_ast": [
      1,
      9,
      6,
      0,
      7,
      14,
      0,
      6,
      8,
      0,
      7,
      4,
      5,
      6,
      8,
      6,
      8,
      0,
      6,
      0,
      0,
      7
    ]
  },
  "break_continue": {
    "raw_ast": "Module(body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=10)], keywords=[]), body=[If(test=Compare(left=Name(id='i', ctx=Load()), ops=[Eq()], comparators=[Constant(value=5)]), body=[Break()], orelse=[]), If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Continue()], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[])], type_ignores=[])",
    "flattened_ast": [
      "Module",
      "For",
      "Name",
      "Store",
      "Call",
      "Name",
      "Load",
      "Constant",
      "If",
      "Compare",
      "Name",
      "Load",
      "Eq",
      "Constant",
      "Break",
      "If",
      "Compare",
      "BinOp",
      "Name",
      "Load",
      "Mod",
      "Constant",
      "Eq",
      "Constant",
      "Continue",
      "Expr",
      "Call",
      "Name",
      "Load",
      "Name",
      "Load"
    ],
    "tokenized_ast": [
      1,
      13,
      6,
      0,
      5,
      6,
      8,
      7,
      12,
      0,
      6,
      8,
      0,
      7,
      15,
      12,
      0,
      10,
      6,
      8,
      0,
      7,
      0,
      7,
      16,
      4,
      5,
      6,
      8,
      6,
      8
    ]
  },
  "class_definition": {
    "raw_ast": "Module(body=[ClassDef(name='Person', bases=[], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Store())], value=Name(id='name', ctx=Load()))], decorator_list=[], type_params=[])], decorator_list=[], type_params=[]), Assign(targets=[Name(id='p', ctx=Store())], value=Call(func=Name(id='Person', ctx=Load()), args=[Constant(value='Alice')], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Attribute(value=Name(id='p', ctx=Load()), attr='name', ctx=Load())], keywords=[]))], type_ignores=[])",
    "flattened_ast": [
      "Module",
      "ClassDef",
      "FunctionDef",
      "arguments",
      "arg",
      "arg",
      "Assign",
      "Attribute",
      "Name",
      "Load",
      "Store",
      "Name",
      "Load",
      "Assign",
      "Name",
      "Store",
      "Call",
      "Name",
      "Load",
      "Constant",
      "Expr",
      "Call",
      "Name",
      "Load",
      "Attribute",
      "Name",
      "Load",
      "Load"
    ],
    "tokenized_ast": [
      1,
      17,
      2,
      3,
      0,
      0,
      9,
      0,
      6,
      8,
      0,
      6,
      8,
      9,
      6,
      0,
      5,
      6,
      8,
      7,
      4,
      5,
      6,
      8,
      0,
      6,
      8,
      8
    ]
  },
  "class_with_methods": {
    "raw_ast": "Module(body=[ClassDef(name='Animal', bases=[], keywords=[], body=[FunctionDef(name='speak', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='Animal speaks')], keywords=[]))], decorator_list=[], type_params=[])], decorator_list=[], type_params=[]), Assign(targets=[Name(id='a', ctx=Store())], value=Call(func=Name(id='Animal', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='a', ctx=Load()), attr='speak', ctx=Load()), args=[], keywords=[]))], type_ignores=[])",
    "flattened_ast": [
      "Module",
      "ClassDef",
      "FunctionDef",
      "arguments",
      "arg",
      "Expr",
      "Call",
      "Name",
      "Load",
      "Constant",
      "Assign",
      "Name",
      "Store",
      "Call",
      "Name",
      "Load",
      "Expr",
      "Call",
      "Attribute",
      "Name",
      "Load",
      "Load"
    ],
    "tokenized_ast": [
      1,
      17,
      2,
      3,
      0,
      4,
      5,
      6,
      8,
      7,
      9,
      6,
      0,
      5,
      6,
      8,
      4,
      5,
      0,
      6,
      8,
      8
    ]
  },
  "inheritance": {
    "raw_ast": "Module(body=[ClassDef(name='Animal', bases=[], keywords=[], body=[FunctionDef(name='speak', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='Animal speaks')], keywords=[]))], decorator_list=[], type_params=[])], decorator_list=[], type_params=[]), ClassDef(name='Dog', bases=[Name(id='Animal', ctx=Load())], keywords=[], body=[FunctionDef(name='speak', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='Bark!')], keywords=[]))], decorator_list=[], type_params=[])], decorator_list=[], type_params=[]), Assign(targets=[Name(id='d', ctx=Store())], value=Call(func=Name(id='Dog', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='d', ctx=Load()), attr='speak', ctx=Load()), args=[], keywords=[]))], type_ignores=[])",
    "flattened_ast": [
      "Module",
      "ClassDef",
      "FunctionDef",
      "arguments",
      "arg",
      "Expr",
      "Call",
      "Name",
      "Load",
      "Constant",
      "ClassDef",
      "Name",
      "Load",
      "FunctionDef",
      "arguments",
      "arg",
      "Expr",
      "Call",
      "Name",
      "Load",
      "Constant",
      "Assign",
      "Name",
      "Store",
      "Call",
      "Name",
      "Load",
      "Expr",
      "Call",
      "Attribute",
      "Name",
      "Load",
      "Load"
    ],
    "tokenized_ast": [
      1,
      17,
      2,
      3,
      0,
      4,
      5,
      6,
      8,
      7,
      17,
      6,
      8,
      2,
      3,
      0,
      4,
      5,
      6,
      8,
      7,
      9,
      6,
      0,
      5,
      6,
      8,
      4,
      5,
      0,
      6,
      8,
      8
    ]
  },
  "list_operations": {
    "raw_ast": "Module(body=[Assign(targets=[Name(id='numbers', ctx=Store())], value=List(elts=[Constant(value=1), Constant(value=2), Constant(value=3), Constant(value=4), Constant(value=5)], ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='numbers', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value=6)], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='numbers', ctx=Load())], keywords=[]))], type_ignores=[])",
    "flattened_ast": [
      "Module",
      "Assign",
      "Name",
      "Store",
      "List",
      "Constant",
      "Constant",
      "Constant",
      "Constant",
      "Constant",
      "Load",
      "Expr",
      "Call",
      "Attribute",
      "Name",
      "Load",
      "Load",
      "Constant",
      "Expr",
      "Call",
      "Name",
      "Load",
      "Name",
      "Load"
    ],
    "tokenized_ast": [
      1,
      9,
      6,
      0,
      0,
      7,
      7,
      7,
      7,
      7,
      8,
      4,
      5,
      0,
      6,
      8,
      8,
      7,
      4,
      5,
      6,
      8,
      6,
      8
    ]
  },
  "dictionary_operations": {
    "raw_ast": "Module(body=[Assign(targets=[Name(id='person', ctx=Store())], value=Dict(keys=[Constant(value='name'), Constant(value='age')], values=[Constant(value='Alice'), Constant(value=25)])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Subscript(value=Name(id='person', ctx=Load()), slice=Constant(value='name'), ctx=Load())], keywords=[]))], type_ignores=[])",
    "flattened_ast": [
      "Module",
      "Assign",
      "Name",
      "Store",
      "Dict",
      "Constant",
      "Constant",
      "Constant",
      "Constant",
      "Expr",
      "Call",
      "Name",
      "Load",
      "Subscript",
      "Name",
      "Load",
      "Constant",
      "Load"
    ],
    "tokenized_ast": [
      1,
      9,
      6,
      0,
      19,
      7,
      7,
      7,
      7,
      4,
      5,
      6,
      8,
      0,
      6,
      8,
      7,
      8
    ]
  },
  "set_operations": {
    "raw_ast": "Module(body=[Assign(targets=[Name(id='unique_nums', ctx=Store())], value=Set(elts=[Constant(value=1), Constant(value=2), Constant(value=3), Constant(value=3), Constant(value=2)])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='unique_nums', ctx=Load())], keywords=[]))], type_ignores=[])",
    "flattened_ast": [
      "Module",
      "Assign",
      "Name",
      "Store",
      "Set",
      "Constant",
      "Constant",
      "Constant",
      "Constant",
      "Constant",
      "Expr",
      "Call",
      "Name",
      "Load",
      "Name",
      "Load"
    ],
    "tokenized_ast": [
      1,
      9,
      6,
      0,
      20,
      7,
      7,
      7,
      7,
      7,
      4,
      5,
      6,
      8,
      6,
      8
    ]
  },
  "try_except": {
    "raw_ast": "Module(body=[Try(body=[Assign(targets=[Name(id='x', ctx=Store())], value=BinOp(left=Constant(value=1), op=Div(), right=Constant(value=0)))], handlers=[ExceptHandler(type=Name(id='ZeroDivisionError', ctx=Load()), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='Cannot divide by zero')], keywords=[]))])], orelse=[], finalbody=[])], type_ignores=[])",
    "flattened_ast": [
      "Module",
      "Try",
      "Assign",
      "Name",
      "Store",
      "BinOp",
      "Constant",
      "Div",
      "Constant",
      "ExceptHandler",
      "Name",
      "Load",
      "Expr",
      "Call",
      "Name",
      "Load",
      "Constant"
    ],
    "tokenized_ast": [
      1,
      21,
      9,
      6,
      0,
      10,
      7,
      0,
      7,
      22,
      6,
      8,
      4,
      5,
      6,
      8,
      7
    ]
  },
  "try_except_finally": {
    "raw_ast": "Module(body=[Try(body=[Assign(targets=[Name(id='x', ctx=Store())], value=BinOp(left=Constant(value=10), op=Div(), right=Constant(value=2)))], handlers=[], orelse=[], finalbody=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='Always runs')], keywords=[]))])], type_ignores=[])",
    "flattened_ast": [
      "Module",
      "Try",
      "Assign",
      "Name",
      "Store",
      "BinOp",
      "Constant",
      "Div",
      "Constant",
      "Expr",
      "Call",
      "Name",
      "Load",
      "Constant"
    ],
    "tokenized_ast": [
      1,
      21,
      9,
      6,
      0,
      10,
      7,
      0,
      7,
      4,
      5,
      6,
      8,
      7
    ]
  },
  "file_read": {
    "raw_ast": "Module(body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='file.txt'), Constant(value='r')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Name(id='content', ctx=Store())], value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='read', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='content', ctx=Load())], keywords=[]))])], type_ignores=[])",
    "flattened_ast": [
      "Module",
      "With",
      "withitem",
      "Call",
      "Name",
      "Load",
      "Constant",
      "Constant",
      "Name",
      "Store",
      "Assign",
      "Name",
      "Store",
      "Call",
      "Attribute",
      "Name",
      "Load",
      "Load",
      "Expr",
      "Call",
      "Name",
      "Load",
      "Name",
      "Load"
    ],
    "tokenized_ast": [
      1,
      23,
      0,
      5,
      6,
      8,
      7,
      7,
      6,
      0,
      9,
      6,
      0,
      5,
      0,
      6,
      8,
      8,
      4,
      5,
      6,
      8,
      6,
      8
    ]
  },
  "file_write": {
    "raw_ast": "Module(body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='file.txt'), Constant(value='w')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='write', ctx=Load()), args=[Constant(value='Hello, World!')], keywords=[]))])], type_ignores=[])",
    "flattened_ast": [
      "Module",
      "With",
      "withitem",
      "Call",
      "Name",
      "Load",
      "Constant",
      "Constant",
      "Name",
      "Store",
      "Expr",
      "Call",
      "Attribute",
      "Name",
      "Load",
      "Load",
      "Constant"
    ],
    "tokenized_ast": [
      1,
      23,
      0,
      5,
      6,
      8,
      7,
      7,
      6,
      0,
      4,
      5,
      0,
      6,
      8,
      8,
      7
    ]
  },
  "list_comprehension": {
    "raw_ast": "Module(body=[Assign(targets=[Name(id='squares', ctx=Store())], value=ListComp(elt=BinOp(left=Name(id='x', ctx=Load()), op=Pow(), right=Constant(value=2)), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=5)], keywords=[]), ifs=[], is_async=0)]))], type_ignores=[])",
    "flattened_ast": [
      "Module",
      "Assign",
      "Name",
      "Store",
      "ListComp",
      "BinOp",
      "Name",
      "Load",
      "Pow",
      "Constant",
      "comprehension",
      "Name",
      "Store",
      "Call",
      "Name",
      "Load",
      "Constant"
    ],
    "tokenized_ast": [
      1,
      9,
      6,
      0,
      18,
      10,
      6,
      8,
      0,
      7,
      0,
      6,
      0,
      5,
      6,
      8,
      7
    ]
  },
  "generator_function": {
    "raw_ast": "Module(body=[FunctionDef(name='count', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Yield(value=Constant(value=1))), Expr(value=Yield(value=Constant(value=2)))], decorator_list=[], type_params=[]), Assign(targets=[Name(id='gen', ctx=Store())], value=Call(func=Name(id='count', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Name(id='next', ctx=Load()), args=[Name(id='gen', ctx=Load())], keywords=[])], keywords=[]))], type_ignores=[])",
    "flattened_ast": [
      "Module",
      "FunctionDef",
      "arguments",
      "Expr",
      "Yield",
      "Constant",
      "Expr",
      "Yield",
      "Constant",
      "Assign",
      "Name",
      "Store",
      "Call",
      "Name",
      "Load",
      "Expr",
      "Call",
      "Name",
      "Load",
      "Call",
      "Name",
      "Load",
      "Name",
      "Load"
    ],
    "tokenized_ast": [
      1,
      2,
      3,
      4,
      0,
      7,
      4,
      0,
      7,
      9,
      6,
      0,
      5,
      6,
      8,
      4,
      5,
      6,
      8,
      5,
      6,
      8,
      6,
      8
    ]
  },
  "map_filter": {
    "raw_ast": "Module(body=[Assign(targets=[Name(id='nums', ctx=Store())], value=List(elts=[Constant(value=1), Constant(value=2), Constant(value=3), Constant(value=4), Constant(value=5)], ctx=Load())), Assign(targets=[Name(id='squared', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='map', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=BinOp(left=Name(id='x', ctx=Load()), op=Pow(), right=Constant(value=2))), Name(id='nums', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='squared', ctx=Load())], keywords=[]))], type_ignores=[])",
    "flattened_ast": [
      "Module",
      "Assign",
      "Name",
      "Store",
      "List",
      "Constant",
      "Constant",
      "Constant",
      "Constant",
      "Constant",
      "Load",
      "Assign",
      "Name",
      "Store",
      "Call",
      "Name",
      "Load",
      "Call",
      "Name",
      "Load",
      "Lambda",
      "arguments",
      "arg",
      "BinOp",
      "Name",
      "Load",
      "Pow",
      "Constant",
      "Name",
      "Load",
      "Expr",
      "Call",
      "Name",
      "Load",
      "Name",
      "Load"
    ],
    "tokenized_ast": [
      1,
      9,
      6,
      0,
      0,
      7,
      7,
      7,
      7,
      7,
      8,
      9,
      6,
      0,
      5,
      6,
      8,
      5,
      6,
      8,
      24,
      3,
      0,
      10,
      6,
      8,
      0,
      7,
      6,
      8,
      4,
      5,
      6,
      8,
      6,
      8
    ]
  },
  "threading": {
    "raw_ast": "Module(body=[Import(names=[alias(name='threading')]), FunctionDef(name='print_numbers', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=5)], keywords=[]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[], type_params=[]), Assign(targets=[Name(id='t', ctx=Store())], value=Call(func=Attribute(value=Name(id='threading', ctx=Load()), attr='Thread', ctx=Load()), args=[], keywords=[keyword(arg='target', value=Name(id='print_numbers', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='t', ctx=Load()), attr='start', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='t', ctx=Load()), attr='join', ctx=Load()), args=[], keywords=[]))], type_ignores=[])",
    "flattened_ast": [
      "Module",
      "Import",
      "alias",
      "FunctionDef",
      "arguments",
      "For",
      "Name",
      "Store",
      "Call",
      "Name",
      "Load",
      "Constant",
      "Expr",
      "Call",
      "Name",
      "Load",
      "Name",
      "Load",
      "Assign",
      "Name",
      "Store",
      "Call",
      "Attribute",
      "Name",
      "Load",
      "Load",
      "keyword",
      "Name",
      "Load",
      "Expr",
      "Call",
      "Attribute",
      "Name",
      "Load",
      "Load",
      "Expr",
      "Call",
      "Attribute",
      "Name",
      "Load",
      "Load"
    ],
    "tokenized_ast": [
      1,
      0,
      0,
      2,
      3,
      13,
      6,
      0,
      5,
      6,
      8,
      7,
      4,
      5,
      6,
      8,
      6,
      8,
      9,
      6,
      0,
      5,
      0,
      6,
      8,
      8,
      0,
      6,
      8,
      4,
      5,
      0,
      6,
      8,
      8,
      4,
      5,
      0,
      6,
      8,
      8
    ]
  },
  "multiprocessing": {
    "raw_ast": "Module(body=[Import(names=[alias(name='multiprocessing')]), FunctionDef(name='worker', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='Worker process')], keywords=[]))], decorator_list=[], type_params=[]), Assign(targets=[Name(id='p', ctx=Store())], value=Call(func=Attribute(value=Name(id='multiprocessing', ctx=Load()), attr='Process', ctx=Load()), args=[], keywords=[keyword(arg='target', value=Name(id='worker', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='start', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='join', ctx=Load()), args=[], keywords=[]))], type_ignores=[])",
    "flattened_ast": [
      "Module",
      "Import",
      "alias",
      "FunctionDef",
      "arguments",
      "Expr",
      "Call",
      "Name",
      "Load",
      "Constant",
      "Assign",
      "Name",
      "Store",
      "Call",
      "Attribute",
      "Name",
      "Load",
      "Load",
      "keyword",
      "Name",
      "Load",
      "Expr",
      "Call",
      "Attribute",
      "Name",
      "Load",
      "Load",
      "Expr",
      "Call",
      "Attribute",
      "Name",
      "Load",
      "Load"
    ],
    "tokenized_ast": [
      1,
      0,
      0,
      2,
      3,
      4,
      5,
      6,
      8,
      7,
      9,
      6,
      0,
      5,
      0,
      6,
      8,
      8,
      0,
      6,
      8,
      4,
      5,
      0,
      6,
      8,
      8,
      4,
      5,
      0,
      6,
      8,
      8
    ]
  },
  "decorator_function": {
    "raw_ast": "Module(body=[FunctionDef(name='decorator', args=arguments(posonlyargs=[], args=[arg(arg='func')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[FunctionDef(name='wrapper', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='Before function call')], keywords=[])), Expr(value=Call(func=Name(id='func', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='After function call')], keywords=[]))], decorator_list=[], type_params=[]), Return(value=Name(id='wrapper', ctx=Load()))], decorator_list=[], type_params=[]), FunctionDef(name='say_hello', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='Hello!')], keywords=[]))], decorator_list=[Name(id='decorator', ctx=Load())], type_params=[]), Expr(value=Call(func=Name(id='say_hello', ctx=Load()), args=[], keywords=[]))], type_ignores=[])",
    "flattened_ast": [
      "Module",
      "FunctionDef",
      "arguments",
      "arg",
      "FunctionDef",
      "arguments",
      "Expr",
      "Call",
      "Name",
      "Load",
      "Constant",
      "Expr",
      "Call",
      "Name",
      "Load",
      "Expr",
      "Call",
      "Name",
      "Load",
      "Constant",
      "Return",
      "Name",
      "Load",
      "FunctionDef",
      "arguments",
      "Expr",
      "Call",
      "Name",
      "Load",
      "Constant",
      "Name",
      "Load",
      "Expr",
      "Call",
      "Name",
      "Load"
    ],
    "tokenized_ast": [
      1,
      2,
      3,
      0,
      2,
      3,
      4,
      5,
      6,
      8,
      7,
      4,
      5,
      6,
      8,
      4,
      5,
      6,
      8,
      7,
      11,
      6,
      8,
      2,
      3,
      4,
      5,
      6,
      8,
      7,
      6,
      8,
      4,
      5,
      6,
      8
    ]
  },
  "async_function": {
    "raw_ast": "Module(body=[Import(names=[alias(name='asyncio')]), AsyncFunctionDef(name='hello', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='Hello!')], keywords=[])), Expr(value=Await(value=Call(func=Attribute(value=Name(id='asyncio', ctx=Load()), attr='sleep', ctx=Load()), args=[Constant(value=1)], keywords=[]))), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='World!')], keywords=[]))], decorator_list=[], type_params=[]), Expr(value=Call(func=Attribute(value=Name(id='asyncio', ctx=Load()), attr='run', ctx=Load()), args=[Call(func=Name(id='hello', ctx=Load()), args=[], keywords=[])], keywords=[]))], type_ignores=[])",
    "flattened_ast": [
      "Module",
      "Import",
      "alias",
      "AsyncFunctionDef",
      "arguments",
      "Expr",
      "Call",
      "Name",
      "Load",
      "Constant",
      "Expr",
      "Await",
      "Call",
      "Attribute",
      "Name",
      "Load",
      "Load",
      "Constant",
      "Expr",
      "Call",
      "Name",
      "Load",
      "Constant",
      "Expr",
      "Call",
      "Attribute",
      "Name",
      "Load",
      "Load",
      "Call",
      "Name",
      "Load"
    ],
    "tokenized_ast": [
      1,
      0,
      0,
      26,
      3,
      4,
      5,
      6,
      8,
      7,
      4,
      0,
      5,
      0,
      6,
      8,
      8,
      7,
      4,
      5,
      6,
      8,
      7,
      4,
      5,
      0,
      6,
      8,
      8,
      5,
      6,
      8
    ]
  }
}